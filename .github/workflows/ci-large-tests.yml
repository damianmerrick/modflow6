# Parts of configuration file are based on the examples in this repository:
# https://github.com/oneapi-src/oneapi-ci
#
# Which have the following copyright:
# SPDX-FileCopyrightText: 2020 Intel Corporation
#
# SPDX-License-Identifier: MIT


# # add this back in to on: if there is a need to debug the large tests
#
#  pull_request:
#    branches:
#      - develop


name: Large tests

on:
  schedule:
    - cron: '0 6 * * *' # run at 6 AM UTC every day

env:
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17392/w_HPCKit_p_2021.1.0.2682_offline.exe
  LINUX_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17427/l_HPCKit_p_2021.1.0.2684_offline.sh
  MACOS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17398/m_HPCKit_p_2021.1.0.2681_offline.dmg
  WINDOWS_FORTRAN_COMPONENTS: intel.oneapi.win.ifort-compiler
  LINUX_FORTRAN_COMPONENTS_WEB: intel.oneapi.lin.ifort-compiler
  MACOS_FORTRAN_COMPONENTS: intel.oneapi.mac.ifort-compiler

jobs:
  test:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        FC: [ ifort, gfortran ]
        test_script: [ largetests, examples ]
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2.3.4

      - name: setup-conda
        uses: s-weigand/setup-conda@v1.0.5
        with:
          update-conda: true

      - name: set FC=ifort environmental variable
        if: matrix.FC == 'ifort'
        run: |
          echo "FC=ifort" >> $GITHUB_ENV

      - name: cache install ifort on linux
        if: matrix.FC == 'ifort'
        id: cache-install-linux
        uses: actions/cache@v2
        with:
          path: |
            /opt/intel/oneapi/compiler
          key: install-${{ env.LINUX_HPCKIT_URL }}-${{ env.LINUX_FORTRAN_COMPONENTS_WEB }}-compiler-${{ hashFiles('**/.github/intel-scripts/cache_exclude_linux.sh') }}

      - name: install ifort on linux
        if: matrix.FC == 'ifort' && steps.cache-install-linux.outputs.cache-hit != 'true'
        run: |
          .github/intel-scripts/install_linux.sh $LINUX_HPCKIT_URL $LINUX_FORTRAN_COMPONENTS_WEB

      - name: Setup symbolic links on Linux
        if: matrix.FC == 'gfortran'
        run: |
          sudo ln -fs /usr/bin/gfortran-10 /usr/local/bin/gfortran
          sudo ln -fs /usr/bin/gcc-10 /usr/local/bin/gcc
          sudo ln -fs /usr/bin/g++-10 /usr/local/bin/g++

      - name: Install python packages
        run: |
          .github/common/install-python.sh

      - name: Install additional python packages
        run: |
          pip install jupyter jupytext shapely scipy pandas pyshp

      - name: Print conda version
        run: |
          conda --version

      - name: Print python package versions
        run: |
          .github/common/python-version.sh

      - name: Set and print branch name
        run: |
          .github/common/git-branch-export.sh

      - name: Get the appropriate large regression test files
        run: |
          .github/common/get-${{ matrix.test_script }}-regression-files.sh

      - name: Update flopy MODFLOW 6 classes
        run: |
          .github/common/update-flopy.sh

      - name: Run script to build example scripts
        if: matrix.test_script == 'examples'
        run: |
          cd ../modflow6-examples/etc/
          python ci_build_files.py
          ls -lh ../examples/
          cd ../../modflow6

      - name: activate ifort and build applications
        if: matrix.FC == 'ifort'
        run: |
          .github/intel-scripts/ifortvars_linux.sh

      - name: Build gfortran applications
        if: matrix.FC == 'gfortran'
        run: |
          nosetests -v --with-id --with-timer -w ./autotest get_build_exes.py

      - name: Test applications
        run: |
          nosetests -v --with-id --with-timer -w ./autotest test_z03_${{ matrix.test_script }}.py

      - name: exclude unused files from cache on linux
        if: matrix.FC == 'ifort' && steps.cache-install-linux.outputs.cache-hit != 'true'
        run: |
          .github/intel-scripts/cache_exclude_linux.sh
